# --- Python Script to identify related category ---

import pandas as pd
import numpy as np
from openai import OpenAI

# --- CONFIGURATION ---

input_file = r"C:\Users\user-name\crosslink\input.xlsx"
output_file = r"C:\Users\user-name\crosslink\crosslink_ok.xlsx"
api_key = "XXXXXXXXXXXXXXXXX"  # <--- insert your API key here


# Initialize OpenAI client
client = OpenAI(api_key=api_key)

# --- READ EXCEL FILE ---
try:
    df = pd.read_excel(input_file, header=0)  # use the first row as headers
except Exception as e:
    print(f"❌ Error reading the file: {e}")
    exit(1)

# Check required columns
expected_columns = {"Category", "ID"}
if not expected_columns.issubset(df.columns):
    print(f"❌ Missing required columns. Expected: {expected_columns}")
    exit(1)

# Extract data
categories = df["Category"].astype(str).tolist()
ids = df["ID"].astype(str).tolist()

if len(categories) < 2:
    print("❌ At least 2 categories are required.")
    exit(1)

# --- GET EMBEDDINGS ---
embeddings = []
for name in categories:
    try:
        response = client.embeddings.create(
            input=name,
            model="text-embedding-ada-002"
        )
        embedding = response.data[0].embedding
        embeddings.append(np.array(embedding))
    except Exception as e:
        print(f"⚠️ Error getting embedding for '{name}': {e}")
        embeddings.append(None)

# Validate embeddings
valid_embeddings = [e for e in embeddings if e is not None]
if not valid_embeddings:
    print("❌ No embeddings could be retrieved.")
    exit(1)

# Fill missing embeddings with zero vectors
embedding_dim = len(valid_embeddings[0])
embeddings = [e if e is not None else np.zeros(embedding_dim) for e in embeddings]
embedding_matrix = np.vstack(embeddings)

# Normalize embeddings
norms = np.linalg.norm(embedding_matrix, axis=1)
norms[norms == 0] = 1e-9

# --- CALCULATE SIMILARITY WITH FILTER ---
related_ids_final = []
related_names_final = []

SIMILARITY_THRESHOLD = 0.80  # adjust as needed

for i, source_category in enumerate(categories):
    vec_i = embedding_matrix[i]
    dot_product = embedding_matrix @ vec_i
    cos_sim = dot_product / (norms[i] * norms)
    cos_sim[i] = -1  # exclude itself

    candidates = []
    for idx, sim in enumerate(cos_sim):
        if idx == i or sim < SIMILARITY_THRESHOLD:
            continue
        candidates.append({
            "id": ids[idx],
            "name": categories[idx],
            "score": sim
        })

    # Sort and pick top 5 most similar
    top_5 = sorted(candidates, key=lambda x: x["score"], reverse=True)[:5]
    final_ids = [c["id"] for c in top_5]
    final_names = [c["name"] for c in top_5]

    related_ids_final.append(";".join(final_ids))
    related_names_final.append(";".join(final_names))

# --- ADD NEW COLUMNS ---
df["Related"] = related_ids_final
df["RelatedNames"] = related_names_final

# --- SAVE FINAL RESULT ---
try:
    df.to_excel(output_file, index=False)
    print(f"✅ File saved successfully at: {output_file}")
except Exception as e:
    print(f"❌ Error saving the file: {e}")
